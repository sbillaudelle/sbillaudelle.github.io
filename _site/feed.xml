<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Sebastian Billaudelle</title>
    <atom:link href="http://sbillaudelle.de/feed.xml" rel="self" type="application/rss+xml"/>
    <link>http://sbillaudelle.de/</link>
    <description>A website with blog posts and pages</description>
    <pubDate>Fri, 30 Sep 2016 14:33:43 +0200</pubDate>
    
      <item>
        <title>Seamlessly Embedding Matplotlib Output into LaTeX</title>
        <link>http://sbillaudelle.de/2015/02/23/seamlessly-embedding-matplotlib-output-into-latex.html</link>
        <guid isPermaLink="true">http://sbillaudelle.de/2015/02/23/seamlessly-embedding-matplotlib-output-into-latex.html</guid>
        <description>&lt;p&gt;In the scientific field, many people use &lt;a href=&quot;http://matplotlib.org/&quot;&gt;matplotlib&lt;/a&gt; for generating plots and then embed the results in their LaTeX document. Why would you want to care about the actual format of the plot graphics? There is of course one obviously bad choice: pixel graphics. Compared to other formats their file size is huge and they don’t scale well at all. “So how about PDF files? I mean, isn’t that a some kind of a vector format?”, you might ask. Good question! I love PDFs and yes, with a few exceptions (for example &lt;code class=&quot;highlighter-rouge&quot;&gt;plt.imshow&lt;/code&gt;) matplotlib writes vector data into &lt;code class=&quot;highlighter-rouge&quot;&gt;.pdf&lt;/code&gt; files. It’s definitely a good way to preview and store a standalone plot and exchange it with others. But you would not want to embed a matplotlib PDF export in your beautiful LaTeX document. The following paragraphs might explain, why you might to change your existing workflow…&lt;/p&gt;

&lt;p&gt;By default matplotlib uses its own, custom text and math rendering system called &lt;a href=&quot;http://matplotlib.org/users/mathtext.html#mathtext-tutorial&quot;&gt;mathtext&lt;/a&gt;. Even if you make use of the &lt;code class=&quot;highlighter-rouge&quot;&gt;text.usetex&lt;/code&gt; setting and your &lt;code class=&quot;highlighter-rouge&quot;&gt;matplotlibrc&lt;/code&gt; is set up to match your LaTeX document font settings – which it probably isn’t –, there’s a chance that your beautiful figure will look like a fish out of water. Luckily, matplotlib has built-in support for generating LaTeX code. To be more precise, it is able to dump your plot as a bunch of &lt;a href=&quot;https://www.ctan.org/pkg/pgf&quot;&gt;PGF&lt;/a&gt; commands. There are multiple advantages to this solution:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Your figure will have exactly the size you have specified either in your &lt;code class=&quot;highlighter-rouge&quot;&gt;matplotlibrc&lt;/code&gt; or manually in your plotting code. You don’t need to worry about the width of your figure when including it into your document.&lt;/li&gt;
  &lt;li&gt;Everything is rendered by LaTeX. And that is even in the same run as the rest of your document. This ensures that your figures and text look and feel consistent.&lt;/li&gt;
  &lt;li&gt;LaTeX will use the same fonts for your plots that you have selected for everything else in the document. You don’t even have to care about that when you generate your plot. To be precise, it uses the &lt;em&gt;sans font&lt;/em&gt; for displaying your labels and whichever &lt;em&gt;math font&lt;/em&gt; you have chosen for formulas and other mathematical expressions.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To let the PGF backend use your document’s fonts, you need to add just a single line to your &lt;code class=&quot;highlighter-rouge&quot;&gt;matplotlibrc&lt;/code&gt; – or set those options from within your script:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;table style=&quot;border-spacing: 0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot; style=&quot;text-align: right&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;n&quot;&gt;pgf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rcfonts&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;False&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;You can configure a LaTeX preamble for &lt;code class=&quot;highlighter-rouge&quot;&gt;.pdf&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;.png&lt;/code&gt; output generated with the PGF backend. This way, your fonts of choice can be set up for standalone plots. This however will not have any influence on plots embedded into your LaTeX files. In my previous post &lt;a href=&quot;sbillaudelle.de/2015/02/20/matplotlib-with-style.html&quot;&gt;Matplotlib with Style&lt;/a&gt;, I introduced my custom styling including a reasonable set of fonts. You might want to check that out!&lt;/p&gt;

&lt;p&gt;In your plotting script, you don’t have to change anything except for the file’s extension. I would recommend to save the figure as a &lt;code class=&quot;highlighter-rouge&quot;&gt;.pgf&lt;/code&gt; as well as a &lt;code class=&quot;highlighter-rouge&quot;&gt;.pdf&lt;/code&gt; file. This way you can preview the plot by simply opening the PDF and use the other one for embedding.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;table style=&quot;border-spacing: 0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot; style=&quot;text-align: right&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;numpy&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;np&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;matplotlib.pyplot&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;plt&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# set up figure size&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;plt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;figure&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;figsize&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;5.8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;3.0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# do some plotting here&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;np&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;linspace&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;1e3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;plt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;plot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# save to file&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;plt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;savefig&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&#39;example.pdf&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;plt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;savefig&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&#39;example.pgf&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;In your LaTeX document, you now can simply embed the &lt;code class=&quot;highlighter-rouge&quot;&gt;.pgf&lt;/code&gt; file by using &lt;code class=&quot;highlighter-rouge&quot;&gt;&lt;span class=&quot;k&quot;&gt;\input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;…&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-latex&quot; data-lang=&quot;latex&quot;&gt;&lt;table style=&quot;border-spacing: 0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot; style=&quot;text-align: right&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;nt&quot;&gt;\begin{figure}&lt;/span&gt;
	&lt;span class=&quot;nt&quot;&gt;\begin{center}&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;\input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;path/to/example.pgf&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;nt&quot;&gt;\end{center}&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;\caption&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;Example figure proudly made with matplotlib&#39;s PGF backend.&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;\end{figure}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;And that’s it. Easy, right? I hope this post did enlighten you and you will never embed your plots using a PDF file or even a pixel graphic. Please help me to improve this article by sending me feedback. I would love to hear about your plotting adventures!&lt;/p&gt;
</description>
        <pubDate>Mon, 23 Feb 2015 00:00:00 +0100</pubDate>
      </item>
    
      <item>
        <title>Matplotlib With Style</title>
        <link>http://sbillaudelle.de/2015/02/20/matplotlib-with-style.html</link>
        <guid isPermaLink="true">http://sbillaudelle.de/2015/02/20/matplotlib-with-style.html</guid>
        <description>&lt;p&gt;&lt;a href=&quot;http://matplotlib.org/&quot;&gt;matplotlib&lt;/a&gt; definitely is the first choice for generating plots from Python and has established itself as the &lt;em&gt;de facto&lt;/em&gt; standard in scientific plotting. Despite providing a simple interface, it comes with support for even the most exotic graphics. However, the default styling looks dull and could definitely need an update! This article will introduce a custom plotting style that is more pleasing to the eye while it does not distract from the underlaying objective: creating informative and clear graphics.&lt;/p&gt;

&lt;p&gt;The presented theme was derived from the excellent &lt;a href=&quot;http://www.huyng.com/posts/sane-color-scheme-for-matplotlib/&quot;&gt;work of Huy Nguyen&lt;/a&gt;. His &lt;code class=&quot;highlighter-rouge&quot;&gt;matplotlibrc&lt;/code&gt; file is inspired by the default &lt;a href=&quot;http://ggplot2.org/&quot;&gt;ggplot2&lt;/a&gt; design and was specificly compiled for plots viewed on a computer screen. My take on this topic however is intended to generate plots which are crisp and look beautiful on screen as well as paper.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/posts/2015-02-17-matplotlib-with-style/examples/trig.png&quot; alt=&quot;A simple plot of trigonometric functions.&quot; class=&quot;half&quot; /&gt;
&lt;img src=&quot;/img/posts/2015-02-17-matplotlib-with-style/examples/hist.png&quot; alt=&quot;An examplary histogram.&quot; class=&quot;half&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The following paragraphs are meant to explain the choices made for this style. They do by no means represent a scientific derivation but merely resemble my personal taste – and incorporate feedback from many friends and colleagues.&lt;/p&gt;

&lt;h3 id=&quot;rendering&quot;&gt;Rendering&lt;/h3&gt;

&lt;p&gt;I am using the &lt;code class=&quot;highlighter-rouge&quot;&gt;pgf&lt;/code&gt; backend which has been introduced to &lt;code class=&quot;highlighter-rouge&quot;&gt;matplotlib&lt;/code&gt; quite lately. It leaves the rendering to &lt;a href=&quot;http://www.xelatex.org/&quot;&gt;XeLaTeX&lt;/a&gt; or &lt;a href=&quot;http://www.luatex.org/&quot;&gt;LuaLaTex&lt;/a&gt; and can generate &lt;a href=&quot;https://www.ctan.org/pkg/pgf&quot;&gt;pgf&lt;/a&gt; compatible output which can be embedded directly into LaTeX documents.&lt;/p&gt;

&lt;p&gt;For printing purposes, I primarily use fonts from the amazing open fonts project &lt;a href=&quot;http://www.linuxlibertine.org/&quot;&gt;Linux Libertine&lt;/a&gt;. This of course is debatable – especially for on-screen viewing. For presentations, I mostly switch to Mozilla’s &lt;a href=&quot;https://www.mozilla.org/en-US/styleguide/products/firefox-os/typeface/&quot;&gt;Fira Sans&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Caveat: the &lt;code class=&quot;highlighter-rouge&quot;&gt;pgf&lt;/code&gt; backend does not support &lt;code class=&quot;highlighter-rouge&quot;&gt;plt.show()&lt;/code&gt; to show a live version of the plot. I simply work around this issue by writing the output to a file. Alternatively, you can set a different backend programmatically using&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;n&quot;&gt;matplotlib&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;use&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&#39;GtkAgg&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;# or any other backend&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h3 id=&quot;color-scheme&quot;&gt;Color Scheme&lt;/h3&gt;

&lt;p&gt;The most important component of the color scheme is of course the coloring of the actual data. The following palette is intended to please the eye while at the same time ensuring enough contrast between successive data sets.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/posts/2015-02-17-matplotlib-with-style/color-scheme.png&quot; alt=&quot;Color palette used in this style.&quot; class=&quot;half&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This palette was taken from the &lt;code class=&quot;highlighter-rouge&quot;&gt;matplotlibrc&lt;/code&gt; this style is based on. However, the background color was set to white instead of grey. This does not only make sense for printing, but also increases contrast in general. Lines and grid are kept in a light grey tone in order not to distract from the actual content.&lt;/p&gt;

&lt;h3 id=&quot;usage&quot;&gt;Usage&lt;/h3&gt;

&lt;p&gt;My &lt;code class=&quot;highlighter-rouge&quot;&gt;matplotlibrc&lt;/code&gt; is &lt;a href=&quot;https://github.com/sbillaudelle/matplotlibrc&quot;&gt;hostet on GitHub&lt;/a&gt;. Alternatively, you can just grab the &lt;a href=&quot;https://raw.githubusercontent.com/sbillaudelle/matplotlibrc/master/matplotlibrc&quot;&gt;latest version of the file&lt;/a&gt;. I will try to keep it up to date and would love to get some feedback from you!&lt;/p&gt;

&lt;p&gt;To use the &lt;code class=&quot;highlighter-rouge&quot;&gt;matplotlibrc&lt;/code&gt; from the repo, just copy it to either &lt;code class=&quot;highlighter-rouge&quot;&gt;~/.config/matplotlib/matplotlibrc&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;~/.matplotlib/matplotlibrc&lt;/code&gt; depending on your system and package version.&lt;/p&gt;
</description>
        <pubDate>Fri, 20 Feb 2015 00:00:00 +0100</pubDate>
      </item>
    
      <item>
        <title>Road Trip to San Diego</title>
        <link>http://sbillaudelle.de/2015/02/18/road-trip-to-san-diego.html</link>
        <guid isPermaLink="true">http://sbillaudelle.de/2015/02/18/road-trip-to-san-diego.html</guid>
        <description>&lt;p&gt;My friend and colleague Paxon was moving to San Francisco. He told me something about driving down there to get some last stuff from his old room and lab. Without thinking, I grabbed my toothbrush and got in the car. At that time, I did not know that I had just started the most beautiful road trip of my life. We followed &lt;a href=&quot;http://en.wikipedia.org/wiki/California_State_Route_1&quot;&gt;California State Route 1&lt;/a&gt; most of the time until we reached Los Angeles. Since it was getting dark, we decided to take the faster inland highways. Now I’m going to shut up and let you enjoy the pictures I have taken on this trip.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/posts/2015-02-18-road-trip-to-san-diego/DSC01672.jpg&quot; alt=&quot;Just some beach south of San Francsisco…&quot; /&gt;
&lt;img src=&quot;/img/posts/2015-02-18-road-trip-to-san-diego/DSC01702.jpg&quot; alt=&quot;Not more than a few miles down south. Such a diverse landscape!&quot; /&gt;
&lt;img src=&quot;/img/posts/2015-02-18-road-trip-to-san-diego/DSC01706.jpg&quot; alt=&quot;California Highway 1&quot; /&gt;
&lt;img src=&quot;/img/posts/2015-02-18-road-trip-to-san-diego/DSC01742.jpg&quot; alt=&quot;Beautiful, right?&quot; /&gt;
&lt;img src=&quot;/img/posts/2015-02-18-road-trip-to-san-diego/DSC01755.jpg&quot; alt=&quot;I love this light! And the fog near the water. Just amazing.&quot; /&gt;
&lt;img src=&quot;/img/posts/2015-02-18-road-trip-to-san-diego/DSC01769.jpg&quot; alt=&quot;Bixby Creek Bridge from 1931 near Big Sur.&quot; /&gt;
&lt;img src=&quot;/img/posts/2015-02-18-road-trip-to-san-diego/DSC01770.jpg&quot; alt=&quot;Near Big Sur.&quot; /&gt;
&lt;img src=&quot;/img/posts/2015-02-18-road-trip-to-san-diego/DSC01774.jpg&quot; alt=&quot;That&#39;s us. He now can say &amp;quot;Bettina, zieh dir bitte etwas an!&amp;quot;!&quot; /&gt;
&lt;img src=&quot;/img/posts/2015-02-18-road-trip-to-san-diego/DSC01787.jpg&quot; alt=&quot;Still around Big Sur.&quot; /&gt;
&lt;img src=&quot;/img/posts/2015-02-18-road-trip-to-san-diego/DSC01809.jpg&quot; alt=&quot;…&quot; /&gt;
&lt;img src=&quot;/img/posts/2015-02-18-road-trip-to-san-diego/DSC01825.jpg&quot; alt=&quot;Yours truly.&quot; /&gt;
&lt;img src=&quot;/img/posts/2015-02-18-road-trip-to-san-diego/DSC01826_01.jpg&quot; alt=&quot;Again.&quot; /&gt;
&lt;img src=&quot;/img/posts/2015-02-18-road-trip-to-san-diego/DSC01832.jpg&quot; alt=&quot;Water and stones. Nothing to see here.&quot; /&gt;
&lt;img src=&quot;/img/posts/2015-02-18-road-trip-to-san-diego/DSC01838.jpg&quot; alt=&quot;Water and coast.&quot; /&gt;
&lt;img src=&quot;/img/posts/2015-02-18-road-trip-to-san-diego/DSC01899.jpg&quot; alt=&quot;Elephant seals! How cool is that?&quot; /&gt;
&lt;img src=&quot;/img/posts/2015-02-18-road-trip-to-san-diego/DSC01902.jpg&quot; alt=&quot;Big seal pimp enjoying the sun.&quot; /&gt;
&lt;img src=&quot;/img/posts/2015-02-18-road-trip-to-san-diego/DSC01917_01.jpg&quot; alt=&quot;Yes, that is California. I would like to be a cow here. Moooh.&quot; /&gt;
&lt;img src=&quot;/img/posts/2015-02-18-road-trip-to-san-diego/DSC01933.jpg&quot; alt=&quot;These captions really get annoying? Anyone still reading?&quot; /&gt;
&lt;img src=&quot;/img/posts/2015-02-18-road-trip-to-san-diego/DSC01935_01.jpg&quot; alt=&quot;Puh, last one!&quot; /&gt;&lt;/p&gt;

</description>
        <pubDate>Wed, 18 Feb 2015 00:00:00 +0100</pubDate>
      </item>
    
  </channel>
</rss>
